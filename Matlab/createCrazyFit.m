function [fitresult, gof] = createCrazyFit(TemperatureRange, DensityRange, Pmean)
%CREATEFIT(TEMPERATURERANGE,DENSITYRANGE,PMEAN)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : TemperatureRange
%      Y Input : DensityRange
%      Z Output: Pmean
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 12-Jan-2017 11:09:43


%% Fit: 'untitled fit 1'.
[xData, yData, zData] = prepareSurfaceData( TemperatureRange, DensityRange, Pmean' );

% Set up fittype and options.
ft = fittype( 'rho*T+rho^2*(x1*T+x2*sqrt(T)+x3+x4/T+x5/T^2) + rho^3*(x6*T+x7+x8/T+x9/T^2) + rho^4*(x10*T+x11+x12/T) + rho^5*(x13) + rho^6*(x14/T+x15/T^2) + rho^7*(x16/T) + rho^8*(x17/T+x18/T^2) + rho^9*(x19/T^2) + ( rho^3*(x20/T^2+x21/T^3)   + rho^5*(x22/T^2+x23/T^4)   + rho^7*(x24/T^2+x25/T^3)   + rho^9*(x26/T^2+x27/T^4)   + rho^11*(x28/T^2+x29/T^3)   + rho^13*(x30/T^2+x31/T^3+x32/T^4) ) * exp(-g*rho^2)', 'independent', {'T', 'rho'}, 'dependent', 'P' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.MaxFunEvals = 1000;
opts.MaxIter = 10000;
opts.Robust = 'Bisquare';
%opts.Lower = [3 -1 0 5 -70 10 30 500 -40 5 400 -500 0 4000 0 1000 -15 1000 -20 1000 30 3000 -250 -20 5000 50 -20 0 -10 0 -10 10 -1000];
%opts.StartPoint = [3 -0.0444 0.00893271 9.8163358 -61.434572 14.161454 43.3353841 1107.8327 -35.429519 10.591298 497.70046 -353.38542 7.2736 4503.6093 7.7805296 13567.114 -8.5818023 16646.578 -14.092234 19386.911 38.585868 3380.0371 -185.67754 -14.3434 8487.5 97.508689 -14.48306 3.8397 -2.00577 1.908447 -5.744178 25.1101 -4523.3];
%opts.Upper = [3 0 1 15 -50 20 50 2000 -30 15 600 -300 10 5000 15 2000 0 2000 -10 3000 50 4000 -100 0 10000 150 -10 10 0 10 0 50 0];
opts.Lower = [3 -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf ];
opts.StartPoint = [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
opts.Upper = [3 Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf];

% Fit model to data.
[fitresult, gof] = fit( [xData, yData], zData, ft, opts );

% Create figure
figure1 = figure('PaperOrientation','landscape','PaperType','A3');

% % Create axes
% axes1 = axes('Parent',figure1);
% hold(axes1,'on');
% view(axes1,[-92.3 22.8]);
% box(axes1,'on');
% grid(axes1,'on');
% set(axes1,'FontSize',18);

% Create plot
h = plot( fitresult, [xData, yData], zData);

% Create surf
% xDataDummy = repmat(linspace(min(xData),max(xData),10)',10);
% yDataDummy = repmat(linspace(min(yData),max(yData),10)',10);
% zDataDummy = feval(fitresult, xDataDummy, yDataDummy);
% surf(xDataDummy, yDataDummy, zDataDummy, 'Parent',axes1,'DisplayName','MBWR',...
%     'PickableParts','none',...
%     'Tag','curvefit.gui.FunctionSurface');
% 
% % Create line
% line(xData,yData,xData,'Parent',axes1,...
%     'DisplayName','NVT simulation data',...
%     'MarkerFaceColor',[0 0 1],...
%     'MarkerEdgeColor',[1 1 1],...
%     'Marker','o',...
%     'LineStyle','none');


% Create xlabel
xlabel(gca(),'$T$','Interpreter','latex');

% Create zlabel
zlabel(gca(),'$\langle P \rangle$','Interpreter','latex');

% Create title
title(gca(),'MBWR fit','Interpreter','latex');

% Create ylabel
ylabel(gca(),'$\rho$','Interpreter','latex');

view(gca(),[-92.3 22.8]);
box(gca(),'on');
grid(gca(),'on');

% Set the remaining axes properties
set(gca(),'FontSize',18);

% Create legend
%legend1 = legend(axes1,'show');
%set(legend1,'Location','northeast');
legend( h, 'MBWR', 'NVT simulation data', 'Location', 'NorthEast' );



